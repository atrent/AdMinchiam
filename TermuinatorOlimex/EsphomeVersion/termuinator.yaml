##############################################################################
# per flashare alimentare tenendo premuto bottone, poi ricordarsi di ribootare
# https://www.olimex.com/Products/IoT/ESP8266/ESP8266-EVB/open-source-hardware
##############################################################################
# provare syslog https://github.com/TheStaticTurtle/esphome_syslog

substitutions:
  devicename: termuinator-at

esphome:
  name: ${devicename}
  platform: esp8266
  board: modwifi
  project:
    name: "atrent.termuinator"
    version: "beta"
  platformio_options:
    board_build.filesystem: littlefs

<<: !include ./secrets.yaml
#<<: !include ./secrets-lab.yaml

web_server:

logger:
  level: INFO
  #level: DEBUG

#debug:
#  update_interval: 60s

mqtt:
  broker: atrent.it
  #broker: routercasa
  discovery: False
  topic_prefix: ${devicename}

sensor:
  # - platform: mqtt_subscribe
  #   name: "Watt"
  #   id: watt
  #   topic: consumo
  #   unit_of_measurement: W
  # - platform: mqtt_subscribe
  #   name: "Volt"
  #   id: volt
  #   topic: sonoff/sensor/hlw8012_voltage/state
  #   unit_of_measurement: V
  #
##############################################################################
  # causa non lettura DHT?!?!!?!?!?!?
  # - platform: uptime
  #   name: "sys uptime"
##############################################################################
  #
  - platform: wifi_signal
    name: "sys WiFi signal"
    update_interval: 30s
  - platform: dht
    pin: GPIO4
    temperature:
      id: temp
      name: "Temperatura"
    humidity:
      id: hum
      name: "Umidità"
    update_interval: 30s
  # - platform: debug
  #   free:
  #     name: "sys Heap Free"
  #   fragmentation:
  #     name: "sys Heap Fragmentation"
  #   block:
  #     name: "sys Heap Max Block"
  #   loop_time:
  #     name: "sys Loop Time"

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO0
      inverted: true
    name: "sys Pulsante"

time:
  - platform: sntp
    id: sntp_time
    #servers: routercasa.casapastru
    timezone: Europe/Rome
    on_time_sync:
      then:
        - logger.log: "*** sync sntp"
    # on_time:
    #   - seconds: '*'
    #     then:
    #       - logger.log: "seconds"
    #       - lambda: |-
    #           ESP_LOGD("time:","%d",id(sntp_time).now().second);
    #           id(oled_display).strftime(0, 0, id(roboto), "%Y-%m-%d %H:%M", id(sntp_time).now());
    #           id(oled_display).printf(10, 10, id(roboto), "ciao");
    #           //id(oled_display).printf(0, 0, id(roboto), "%d:%d:%d", id(sntp_time).now().hour,id(sntp_time).now().minute,id(sntp_time).now().second);
    on_time:
      - minutes: 0
        seconds: 0
        hours: 13
        then:
          - button.press: reboot
      - minutes: 1
        seconds: 1
        hours: 1
        days_of_month: 24
        months: 2
        then:
          - lambda: |-
              auto call = id(regolatore).make_call();
              call.set_mode("COOL");
              // etc. see API reference
              call.perform();
      # - minutes: 45
      #   seconds: 30
      #   hours: 15
      #   #days_of_month: 24
      #   #months: 2
      #   then:
      #     - lambda: |-
      #         auto call = id(regolatore).make_call();
      #         call.set_mode("OFF");
      #         // etc. see API reference
      #         call.perform();


switch:
  - platform: gpio
    id: ventola
    name: "Ventola"
    pin: GPIO5

button:
  - platform: restart
    id: reboot
    name: "sys reboot"

# Example single-point configuration entry (for cooling only)
climate:
  - platform: thermostat
    id: regolatore
    name: "Regolazione"
    sensor: temp
    min_cooling_off_time: 60s
    min_cooling_run_time: 60s
    min_idle_time: 60s
    cool_action:
      - switch.turn_on: ventola
    idle_action:
      - switch.turn_off: ventola
    default_preset: Efficientamento
    preset:
      - name: Efficientamento
        default_target_temperature_high: 25 °C
        mode: "COOL"
    visual:
      min_temperature: 15
      max_temperature: 40
      temperature_step: 1
